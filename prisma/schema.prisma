// prisma/schema.prisma
datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

generator client {
  provider = "prisma-client-js"
}

model Client {
  id                String        @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  code              String        @unique
  taxId             String?
  address           String?
  phone             String?
  email             String?
  fiscalYearStart   DateTime?
  defaultCurrency   String        @default("USD")
  status            ClientStatus  @default(ACTIVE)
  users             User[]
  vendors           Vendor[]
  accounts          Account[]
  supabaseId        String        @unique
  transactions      Transaction[]
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  email         String    @unique
  name          String
  role          UserRole  @default(USER)
  password      String?
  clientId      String    @db.ObjectId
  client        Client    @relation(fields: [clientId], references: [id])
  supabaseId    String    @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum VendorType {
 MANUFACTURER
 DISTRIBUTOR
 WHOLESALER
 OTHER
}


model Vendor {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  clientId      String    @db.ObjectId
  client        Client    @relation(fields: [clientId], references: [id])
  name          String
  code          String
  taxId         String?
  address       String?
  phone         String?
  email         String?
  status        VendorStatus @default(ACTIVE)
  type          VendorType @default(MANUFACTURER)
  accountId     String?   @db.ObjectId
  account       Account?  @relation(fields: [accountId], references: [id])
  balance       Float     @default(0)
  creditLimit   Float     @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([clientId, code])
}

model Account {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  clientId      String    @db.ObjectId
  client        Client    @relation(fields: [clientId], references: [id])
  code          String
  name          String
  type          AccountType
  category      AccountCategory
  vendors       Vendor[]
  balance       Float     @default(0)
  transactions  Transaction[]
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  currency      Currency   @default(USD)

  @@unique([clientId, code])
}

model Transaction {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  clientId      String    @db.ObjectId
  client        Client    @relation(fields: [clientId], references: [id])
  number        String
  date          DateTime
  type          TransactionType
  description   String?
  accountId     String? @db.ObjectId
  account       Account?   @relation(fields: [accountId], references: [id])
  debit         Float     @default(0)
  credit        Float     @default(0)
  status        TransactionStatus @default(PENDING)
  reference     String?
  sourceId      String?   // Reference to NestJS Operation
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  completedAt   DateTime?
  currency      Currency   @default(USD)
  exchangeRate  Float?    // Store rate at transaction time

  @@unique([clientId, number])
}

enum ClientStatus {
  ACTIVE
  SUSPENDED
  INACTIVE
}

enum UserRole {
  ADMIN
  MANAGER
  USER
  ACCOUNTANT
}

enum VendorStatus {
  ACTIVE
  INACTIVE
  BLOCKED
}

enum AccountType {
  ASSET
  LIABILITY
  EQUITY
  REVENUE
  EXPENSE
}

enum AccountCategory {
  CASH
  BANK
  RECEIVABLE
  PAYABLE
  INVENTORY
  FIXED_ASSET
  CURRENT_LIABILITY
  LONG_TERM_LIABILITY
  CAPITAL
  RETAINED_EARNINGS
  SALES
  COST_OF_SALES
  OPERATING_EXPENSE
}

enum TransactionType {
  PURCHASE
  SALE
  PAYMENT
  RECEIPT
  ADJUSTMENT
  TRANSFER
}

enum TransactionStatus {
  PENDING
  COMPLETED
  POSTED
  VOIDED
}

enum Currency {
  USD
  EUR
  ALL
}