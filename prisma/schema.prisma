// prisma/schema.prisma
datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

generator client {
  provider = "prisma-client-js"
}

// Core Models
model Client {
  id                String        @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  code              String        @unique
  taxId             String?       // Fiscal/Tax ID
  address           String?
  phone             String?
  email             String?
  fiscalYearStart   DateTime?
  defaultCurrency   String        @default("USD")
  status            ClientStatus  @default(ACTIVE)
  users             User[]
  warehouses        Warehouse[]
  vendors           Vendor[]
  products          Product[]
  accounts          Account[]
  transactions      Transaction[]
  operations        Operation[]
  batches          Batch[]
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  email         String    @unique
  name          String
  role          UserRole  @default(USER)
  clientId      String    @db.ObjectId
  client        Client    @relation(fields: [clientId], references: [id])
  warehouse     Warehouse? @relation(fields: [warehouseId], references: [id])
  warehouseId   String?   @db.ObjectId
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// Inventory Management
model Warehouse {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  code          String
  clientId      String    @db.ObjectId
  client        Client    @relation(fields: [clientId], references: [id])
  address       String?
  users         User[]
  inventory     InventoryItem[]
  operations    Operation[]
  batches       Batch[]
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([clientId, code])
}

model Product {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  clientId      String    @db.ObjectId
  client        Client    @relation(fields: [clientId], references: [id])
  name          String
  code          String
  barcode       String?
  description   String?
  category      String?
  unit          String    @default("PCS")
  costPrice     Float     @default(0)
  sellPrice     Float     @default(0)
  minStock      Int       @default(0)
  maxStock      Int       @default(0)
  inventory     InventoryItem[]
  batches       Batch[]
  operations    OperationItem[]
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([clientId, code])
}

model InventoryItem {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  warehouseId   String    @db.ObjectId
  warehouse     Warehouse @relation(fields: [warehouseId], references: [id])
  productId     String    @db.ObjectId
  product       Product   @relation(fields: [productId], references: [id])
  quantity      Int       @default(0)
  lastCountDate DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([warehouseId, productId])
}

// Batch Management
model Batch {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  clientId      String    @db.ObjectId
  client        Client    @relation(fields: [clientId], references: [id])
  warehouseId   String    @db.ObjectId
  warehouse     Warehouse @relation(fields: [warehouseId], references: [id])
  productId     String    @db.ObjectId
  product       Product   @relation(fields: [productId], references: [id])
  batchNumber   String
  quantity      Int
  status        BatchStatus @default(ACTIVE)
  expiryDate    DateTime?
  operations    Operation[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([clientId, batchNumber])
}

// Operations & Transfers
model Operation {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  clientId      String    @db.ObjectId
  client        Client    @relation(fields: [clientId], references: [id])
  warehouseId   String    @db.ObjectId
  warehouse     Warehouse @relation(fields: [warehouseId], references: [id])
  type          OperationType
  number        String
  status        OperationStatus @default(DRAFT)
  items         OperationItem[]
  batch         Batch?    @relation(fields: [batchId], references: [id])
  batchId       String?   @db.ObjectId
  vendorId      String?   @db.ObjectId
  vendor        Vendor?   @relation(fields: [vendorId], references: [id])
  reference     String?   // External reference number
  notes         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([clientId, number])
}

model OperationItem {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  operationId   String    @db.ObjectId
  operation     Operation @relation(fields: [operationId], references: [id])
  productId     String    @db.ObjectId
  product       Product   @relation(fields: [productId], references: [id])
  quantity      Int
  unitCost      Float?
  totalCost     Float?
  notes         String?
  createdAt     DateTime  @default(now())
}

// Vendor Management
model Vendor {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  clientId      String    @db.ObjectId
  client        Client    @relation(fields: [clientId], references: [id])
  name          String
  code          String
  taxId         String?
  address       String?
  phone         String?
  email         String?
  status        VendorStatus @default(ACTIVE)
  accountId     String?   @db.ObjectId
  account       Account?  @relation(fields: [accountId], references: [id])
  operations    Operation[]
  balance       Float     @default(0)
  creditLimit   Float     @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([clientId, code])
}

// Accounting
model Account {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  clientId      String    @db.ObjectId
  client        Client    @relation(fields: [clientId], references: [id])
  code          String    // Chart of Accounts code
  name          String
  type          AccountType
  category      AccountCategory
  vendors       Vendor[]
  balance       Float     @default(0)
  transactions  Transaction[]
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([clientId, code])
}

model Transaction {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  clientId      String    @db.ObjectId
  client        Client    @relation(fields: [clientId], references: [id])
  number        String
  date          DateTime
  type          TransactionType
  description   String?
  accountId     String    @db.ObjectId
  account       Account   @relation(fields: [accountId], references: [id])
  debit         Float     @default(0)
  credit        Float     @default(0)
  status        TransactionStatus @default(PENDING)
  reference     String?   // Reference to external document
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([clientId, number])
}

// Enums
enum ClientStatus {
  ACTIVE
  SUSPENDED
  INACTIVE
}

enum UserRole {
  ADMIN
  MANAGER
  USER
  ACCOUNTANT
}

enum BatchStatus {
  ACTIVE
  PROCESSED
  EXPIRED
  CANCELLED
}

enum OperationType {
  PURCHASE
  SALE
  TRANSFER
  ADJUSTMENT
  RETURN
  COUNT
}

enum OperationStatus {
  DRAFT
  PENDING
  COMPLETED
  CANCELLED
}

enum VendorStatus {
  ACTIVE
  INACTIVE
  BLOCKED
}

enum AccountType {
  ASSET
  LIABILITY
  EQUITY
  REVENUE
  EXPENSE
}

enum AccountCategory {
  CASH
  BANK
  RECEIVABLE
  PAYABLE
  INVENTORY
  FIXED_ASSET
  CURRENT_LIABILITY
  LONG_TERM_LIABILITY
  CAPITAL
  RETAINED_EARNINGS
  SALES
  COST_OF_SALES
  OPERATING_EXPENSE
}

enum TransactionType {
  PURCHASE
  SALE
  PAYMENT
  RECEIPT
  ADJUSTMENT
  TRANSFER
}

enum TransactionStatus {
  PENDING
  POSTED
  VOIDED
}